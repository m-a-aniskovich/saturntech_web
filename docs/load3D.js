let camera,scene,renderer,controls;function load3D(e,n,r){init(e,n,r),animate()}function init(e,n,r){camera=new THREE.PerspectiveCamera(45,window.innerWidth/window.innerHeight,.1,20),camera.position.set(-.75,.7,1.25),scene=new THREE.Scene,(new GLTFLoader).setPath(n).load(r,(function(e){scene.add(e.scene)})),renderer=WebGL.isWebGLAvailable()?new THREE.WebGLRenderer({antialias:!0}):new THREE.CanvasRenderer,renderer.setPixelRatio(window.devicePixelRatio),renderer.setSize(window.innerWidth,window.innerHeight),renderer.toneMapping=THREE.ACESFilmicToneMapping,renderer.toneMappingExposure=1,renderer.outputEncoding=THREE.sRGBEncoding,e.appendChild(renderer.domElement);const i=new RoomEnvironment,t=new THREE.PMREMGenerator(renderer);scene.background=new THREE.Color(12303291),scene.environment=t.fromScene(i).texture,controls=new OrbitControls(camera,renderer.domElement),controls.enableDamping=!0,controls.minDistance=1,controls.maxDistance=10,controls.target.set(0,.35,0),controls.update(),window.addEventListener("resize",onWindowResize)}function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight)}function animate(){requestAnimationFrame(animate),controls.update(),render()}function render(){renderer.render(scene,camera)}